name: Cleanup Expired Solicitations

on:
  # Run daily at 2:00 AM UTC (after the auto-refresh has completed)
  schedule:
    - cron: "0 2 * * *"
  
  # Allow manual triggering for testing
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Run in dry-run mode (preview only)'
        required: false
        default: 'false'
        type: choice
        options:
          - 'false'
          - 'true'

jobs:
  cleanup:
    runs-on: ubuntu-latest
    
    env:
      SUPABASE_DB_URL: ${{ secrets.SUPABASE_DB_URL }}
      PYTHONPATH: ${{ github.workspace }}
      TZ: America/Denver
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install sqlalchemy pandas
          fi

      - name: Run cleanup (scheduled)
        if: github.event_name == 'schedule'
        env:
          CLEANUP_DRY_RUN: 'false'
          CLEANUP_BATCH_SIZE: '1000'
          PYTHONUNBUFFERED: '1'
        run: |
          echo "=== Scheduled cleanup run ==="
          date
          python -u scripts/cleanup_expired_solicitations.py
          echo "=== Cleanup complete ==="

      - name: Run cleanup (manual)
        if: github.event_name == 'workflow_dispatch'
        env:
          CLEANUP_DRY_RUN: ${{ github.event.inputs.dry_run || 'false' }}
          CLEANUP_BATCH_SIZE: '1000'
          PYTHONUNBUFFERED: '1'
        run: |
          echo "=== Manual cleanup run ==="
          echo "Dry run: ${{ github.event.inputs.dry_run || 'false' }}"
          date
          python -u scripts/cleanup_expired_solicitations.py
          echo "=== Cleanup complete ==="

      - name: Database stats
        if: always()
        run: |
          echo "=== Post-cleanup database statistics ==="
          python -c "
          import os
          import sqlalchemy as sa
          from sqlalchemy import text
          
          engine = sa.create_engine(os.environ['SUPABASE_DB_URL'])
          with engine.connect() as conn:
              total = conn.execute(text('SELECT COUNT(*) FROM solicitationraw')).scalar()
              with_response_date = conn.execute(text('SELECT COUNT(*) FROM solicitationraw WHERE response_date IS NOT NULL AND response_date != \"None\" AND response_date != \"\"')).scalar()
              recent = conn.execute(text('SELECT COUNT(*) FROM solicitationraw WHERE posted_date >= CURRENT_DATE - INTERVAL \"7 days\"')).scalar()
              print(f'Total solicitations: {total}')
              print(f'With response dates: {with_response_date}')
              print(f'Posted in last 7 days: {recent}')
          "